package com.liblib;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * @author <a href="mailto:ola.bini@gmail.com">Ola Bini</a>
 */
public class DatabaseSupport {
    public final static String LIBLIB_CONN_STRING = "jdbc:derby:liblib_legacy;create=true";

    public final static String CREATE_LIBRARIES = "CREATE TABLE libraries("+
        "id int generated by default as identity NOT NULL PRIMARY KEY,"+
        "name varchar(255))";
    public final static String CREATE_BOOK_DESC = "CREATE TABLE book_descriptions("+
        "id int generated by default as identity NOT NULL PRIMARY KEY,"+
        "name varchar(255),"+
        "isbn varchar(20))";
    public final static String CREATE_BOOK_AUTH = "CREATE TABLE book_authors("+
        "bookdescid int,"+
        "author varchar(255))";
    public final static String CREATE_BOOKS     = "CREATE TABLE books("+
        "id int generated by default as identity NOT NULL PRIMARY KEY,"+
        "bookdescid int,"+
        "libraryid int,"+
        "in_library smallint)";

    public final static String ADD_LIBRARY = "INSERT INTO libraries(name) VALUES(?)";
    public final static String REMOVE_LIBRARY = "DELETE FROM libraries WHERE id = ?";
    public final static String GET_LIBRARY = "SELECT name FROM libraries WHERE id = ?";

    public final static String ADD_BOOK_DESCRIPTION = "INSERT INTO book_descriptions(name,isbn) VALUES(?, ?)";
    public final static String ADD_BOOK_AUTHOR = "INSERT INTO book_authors(bookdescid, author) VALUES(?, ?)";

    public final static String REMOVE_BOOK_DESCRIPTION = "DELETE FROM book_descriptions WHERE id = ?";
    public final static String REMOVE_BOOK_AUTHORS = "DELETE FROM book_authors WHERE bookdescid = ?";

    public final static String ADD_BOOK_INSTANCE = "INSERT INTO books(bookdescid, libraryid, in_library) VALUES(?, ?, 1)";
    public final static String REMOVE_BOOK_INSTANCE = "DELETE FROM books WHERE id = ?";
    public final static String LEND_BOOK_INSTANCE = "UPDATE books SET in_library = 0 WHERE id = ?";
    public final static String RETURN_BOOK_INSTANCE = "UPDATE books SET in_library = 1 WHERE id = ?";

    public final static String GET_BOOK_DESCRIPTION = "SELECT name, isbn FROM book_descriptions WHERE id = ?";
    public final static String GET_BOOK_AUTHORS = "SELECT author FROM book_authors WHERE bookdescid = ?";
    public final static String GET_BOOK_INSTANCES = "SELECT id, libraryid, in_library FROM books WHERE bookdescid = ?";

    public final static String SEARCH_BOOK_DESCRIPTIONS = "SELECT DISTINCT bd.id FROM book_descriptions bd, book_authors ba WHERE bd.id = ba.bookdescid AND LOWER(bd.name) LIKE LOWER(?) OR LOWER(ba.author) LIKE LOWER(?)";

    private Connection conn;

    public DatabaseSupport() {
        try {
            connect();
            createIfNecessary();
        } catch(Exception e) {
            throw new RuntimeException("Couldn't create database support because of Exception", e);
        }
    }

    private final void connect() throws Exception {
        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection(LIBLIB_CONN_STRING);
    }

    private final void createIfNecessary() throws Exception {
        ResultSet rs;
        if(!(rs = conn.getMetaData().getTables(null, null, "LIBRARIES", null)).next()) {
            System.err.println("creating tables");
            Statement s = conn.createStatement();
            s.executeUpdate(CREATE_LIBRARIES);
            s.executeUpdate(CREATE_BOOK_DESC);
            s.executeUpdate(CREATE_BOOK_AUTH);
            s.executeUpdate(CREATE_BOOKS);
            s.close();
        }
        rs.close();
    }

    public int addLibrary(String name) throws Exception {
        PreparedStatement ps = conn.prepareStatement(ADD_LIBRARY,Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, name);
        ps.executeUpdate();
        ResultSet kk = ps.getGeneratedKeys();
        int val = -1;
        if(kk.next()) {
            val = kk.getInt(1);
        }
        kk.close();
        ps.close();
        return val;
    }

    public void removeLibrary(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(REMOVE_LIBRARY);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
    }


    public String getLibraryName(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(GET_LIBRARY);
        try {
            ps.setInt(1, id);
            ResultSet kk = ps.executeQuery();
            if(kk.next()) {
                return kk.getString(1);
            }
        } finally {
            ps.close();
        }
        return "";
    }

    public int addBookDescription(String name, List authors, String isbn) throws Exception {
        PreparedStatement ps = conn.prepareStatement(ADD_BOOK_DESCRIPTION,Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, name);
        ps.setString(2, isbn);
        ps.executeUpdate();
        ResultSet kk = ps.getGeneratedKeys();
        int val = -1;
        if(kk.next()) {
            val = kk.getInt(1);
        }
        kk.close();
        ps.close();
        ps = conn.prepareStatement(ADD_BOOK_AUTHOR);
        ps.setInt(1, val);
        for(Iterator iter = authors.iterator(); iter.hasNext();) {
            ps.setString(2, (String)iter.next());
            ps.executeUpdate();
        }
        ps.close();
        return val;
    }

    public void removeBookDescription(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(REMOVE_BOOK_AUTHORS);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
        ps = conn.prepareStatement(REMOVE_BOOK_DESCRIPTION);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
    }

    public int addBookInstance(int libid, int bookdescid) throws Exception {
        PreparedStatement ps = conn.prepareStatement(ADD_BOOK_INSTANCE,Statement.RETURN_GENERATED_KEYS);
        ps.setInt(1, bookdescid);
        ps.setInt(2, libid);
        ps.executeUpdate();
        ResultSet kk = ps.getGeneratedKeys();
        int val = -1;
        if(kk.next()) {
            val = kk.getInt(1);
        }
        kk.close();
        ps.close();
        return val;
    }

    public void removeBookInstance(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(REMOVE_BOOK_INSTANCE);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
    }

    public void lendBookInstance(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(LEND_BOOK_INSTANCE);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
    }

    public void returnBookInstance(int id) throws Exception {
        PreparedStatement ps = conn.prepareStatement(RETURN_BOOK_INSTANCE);
        ps.setInt(1, id);
        ps.executeUpdate();
        ps.close();
    }

    public List getBookInstances(int id) throws Exception {
        System.err.println("get book instances, " + id);
        List results = new ArrayList();

        PreparedStatement ps = conn.prepareStatement(GET_BOOK_INSTANCES);
        ps.setInt(1, id);
        ResultSet rs = ps.executeQuery();
        while(rs.next()) {
            results.add(new int[]{rs.getInt(1), rs.getInt(2), rs.getInt(3)});
        }
        rs.close();
        ps.close();
        System.err.println(" ... returning: " + results);
        return results;
    }

    public BookDescription getBookDescription(int id) throws Exception {
        BookDescription bd = new BookDescription();
        PreparedStatement ps = conn.prepareStatement(GET_BOOK_DESCRIPTION);
        bd.id = id;
        ps.setInt(1, id);
        ResultSet rs = ps.executeQuery();
        if(rs.next()) {
            bd.name = rs.getString(1);
            bd.isbn = rs.getString(2);
        }
        rs.close();
        ps.close();
        ps = conn.prepareStatement(GET_BOOK_AUTHORS);
        ps.setInt(1, id);
        rs = ps.executeQuery();
        while(rs.next()) {
            bd.authors.add(rs.getString(1));
        }
        rs.close();
        ps.close();
        return bd;
    }

    public List searchBookDescriptions(String namesearch, String authorsearch) throws Exception {
        if(namesearch == null) namesearch = "%";
        if(authorsearch == null) authorsearch = "%";
        List results = new ArrayList();
        PreparedStatement ps = conn.prepareStatement(SEARCH_BOOK_DESCRIPTIONS);
        ps.setString(1, namesearch);
        ps.setString(2, authorsearch);
        ResultSet rs = ps.executeQuery();
        while(rs.next()) {
            results.add(getBookDescription(rs.getInt(1)));
        }
        rs.close();
        ps.close();
        return results;
    }

    private void test() throws Exception {
        Statement s = conn.createStatement();
        s.executeUpdate("DELETE FROM libraries");
        s.executeUpdate("DELETE FROM book_descriptions");
        s.executeUpdate("DELETE FROM book_authors");
        s.executeUpdate("DELETE FROM books");
        s.close();

        int fid = addLibrary("Folsom");
        int sqid = addLibrary("San Quentin");
        int book1 = addBookDescription("Cash: The autobiography",Arrays.asList("Johnny Cash"),"978-0060727536");
        int book2 = addBookDescription("I Was There When It Happened: My Life with Johnny Cash",Arrays.asList("Marshall Grant", "Chris Zar"),"978-1581825107");
        int book3 = addBookDescription("Up Close: Johnny Cash",Arrays.asList("Anne Neimark"),"978-0670062157");
        addBookInstance(fid, book1); addBookInstance(fid, book1);
        addBookInstance(sqid, book1); addBookInstance(sqid, book1);
        int booki1 = addBookInstance(fid, book1);
        int booki2 = addBookInstance(sqid, book2);
        int booki3 = addBookInstance(sqid, book2);
        addBookInstance(fid, book3); addBookInstance(fid, book3);
        addBookInstance(fid, book3); addBookInstance(sqid, book3);
        addBookInstance(sqid, book3); addBookInstance(sqid, book3);
        
        lendBookInstance(booki2);
        returnBookInstance(booki2);

        System.err.println(searchBookDescriptions(null, "%nn%"));
        System.err.println(searchBookDescriptions("%Johnny%", "%nn%"));
        System.err.println(searchBookDescriptions("%Johnny%", null));
        System.err.println(getBookInstances(book2));

        removeBookDescription(book3);
        removeBookInstance(booki3);
    }

    public static void main(String[] args) throws Exception {
        new DatabaseSupport().test();
    }
}// DatabaseSupport
